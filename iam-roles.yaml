AWSTemplateFormatVersion: '2010-09-09'
Description: IAM Roles for ragchat stack

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - stg
      - prod
    Description: Environment name (dev/stg/prod)
  DynamoDBTableArn:
    Type: String
  CognitoUserPoolArn:
    Type: String

Resources:
  RagChatLambdaGenerateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ragchat-lambda-generate-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: RagChatDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref DynamoDBTableArn
        - PolicyName: RagChatBedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModelWithResponseStream
                  - bedrock:GetInferenceProfile
                  - bedrock:InvokeModel
                Resource:
                  - "arn:aws:bedrock:us-west-2:794038219704:inference-profile/us.amazon.nova-lite-v1:0"
                  - "arn:aws:bedrock:*::foundation-model/amazon.nova-lite-v1:0"
                  - "arn:aws:bedrock:us-west-2:794038219704:inference-profile/us.amazon.nova-pro-v1:0"
                  - "arn:aws:bedrock:*::foundation-model/amazon.nova-pro-v1:0"
                  - "arn:aws:bedrock:us-west-2:794038219704:inference-profile/us.anthropic.claude-3-7-sonnet-20250219-v1:0"
                  - "arn:aws:bedrock:*::foundation-model/anthropic.claude-3-7-sonnet-20250219-v1:0"
                  - "arn:aws:bedrock:us-west-2:794038219704:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0"
                  - "arn:aws:bedrock:*::foundation-model/anthropic.claude-sonnet-4-20250514-v1:0"
                  - "arn:aws:bedrock:us-east-1::foundation-model/amazon.nova-canvas-v1:0"
                  - "arn:aws:bedrock:us-west-2::foundation-model/openai.gpt-oss-20b-1:0"
                  - "arn:aws:bedrock:us-west-2::foundation-model/openai.gpt-oss-120b-1:0"

              - Effect: Allow
                Action:
                  - bedrock:Retrieve
                  - bedrock:RetrieveAndGenerate
                Resource:
                  - "arn:aws:bedrock:ap-northeast-1:794038219704:knowledge-base/*"
                  - "arn:aws:bedrock:ap-northeast-1:794038219704:knowledge-base/*/*"
              - Effect: Allow
                Action:
                  - bedrock:GetKnowledgeBase
                  - bedrock:ListKnowledgeBases
                Resource: "*"

  RagChatLambdaGetChatRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ragchat-lambda-getchat-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RagChatDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref DynamoDBTableArn

  RagChatLambdaPromptImagesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ragchat-lambda-promptimages-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  RagChatLambdaS3ImagesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ragchat-lambda-s3images-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: RagChatDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref DynamoDBTableArn

  RagChatLambdaCognitoSESRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-ragchat-lambda-cognito-ses-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RagChatCognitoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource:
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"
              - Effect: Allow
                Action:
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                Resource:
                  - !Ref CognitoUserPoolArn

Outputs:
  RagChatLambdaGenerateRoleArn:
    Description: ARN of the RagChatLambdaGenerateRole
    Value: !GetAtt RagChatLambdaGenerateRole.Arn

  RagChatLambdaGetChatRoleArn:
    Description: ARN of the RagChatLambdaGetChatRole
    Value: !GetAtt RagChatLambdaGetChatRole.Arn

  RagChatLambdaPromptImagesRoleArn:
    Description: ARN of the RagChatLambdaPromptImagesRole
    Value: !GetAtt RagChatLambdaPromptImagesRole.Arn

  RagChatLambdaS3ImagesRoleArn:
    Description: ARN of the RagChatLambdaS3ImagesRole
    Value: !GetAtt RagChatLambdaS3ImagesRole.Arn

  RagChatLambdaCognitoSESRoleArn:
    Description: ARN of the RagChatLambdaCognitoSESRole
    Value: !GetAtt RagChatLambdaCognitoSESRole.Arn