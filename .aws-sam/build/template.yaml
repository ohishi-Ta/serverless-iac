AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: dev-sam stack
Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Architectures:
    - x86_64
Parameters:
  DomainName:
    Type: String
    Default: dev.ai.cpinfo.jp
    Description: Domain name for CloudFront distribution
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the domain (must be in us-east-1)
    Default: arn:aws:acm:us-east-1:794038219704:certificate/7d2d02e3-c835-491a-b616-50b55f738943
Conditions:
  HasCertificate:
    Fn::Not:
    - Fn::Equals:
      - Ref: CertificateArn
      - ''
Resources:
  IamStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: IamStack\template.yaml
      Parameters:
        DynamoDBTableArn:
          Fn::GetAtt:
          - DevSamRagAppTable
          - Arn
        CognitoUserPoolArn:
          Fn::GetAtt:
          - DevSamRagAppUserPool
          - Arn
    Metadata:
      SamResourceId: IamStack
  DevSamRagAppHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: dev-sam-rag-app-http-api
      CorsConfiguration:
        AllowOrigins:
        - '*'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
        - DELETE
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${DevSamRagAppUserPool}
              audience:
              - Ref: DevSamRagAppUserPoolClient
            IdentitySource: $request.header.Authorization
        DefaultAuthorizer: CognitoAuthorizer
  DevSamRagPromptImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-prompt-images-function
      CodeUri: DevSamRagPromptImagesFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaPromptImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME:
            Ref: DevSamRagPromptImagesBucket
      Events:
        PresignedUrl:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /presigned-url
            Method: POST
    Metadata:
      SamResourceId: DevSamRagPromptImagesFunction
  DevSamS3ImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-s3-images-function
      CodeUri: DevSamS3ImagesFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaS3ImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME:
            Ref: DevSamRagPromptImagesBucket
      Events:
        GetImage:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /get-image
            Method: POST
    Metadata:
      SamResourceId: DevSamS3ImagesFunction
  DevSamCognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-post-confirmation-function
      CodeUri: DevSamCognitoPostConfirmationFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaCognitoSESRoleArn
    Metadata:
      SamResourceId: DevSamCognitoPostConfirmationFunction
  DevSamCognitoUserEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-user-enable-function
      CodeUri: DevSamCognitoUserEnableFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaCognitoSESRoleArn
    Metadata:
      SamResourceId: DevSamCognitoUserEnableFunction
  DevSamRagGenerateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-generate-image-function
      CodeUri: DevSamRagGenerateImageFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_GENIMAGE_AWS_REGION: us-east-1
          DYNAMODB_TABLE_NAME:
            Ref: DevSamRagAppTable
          S3_BUCKET_NAME:
            Ref: DevSamRagPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowOrigins:
          - '*'
          AllowHeaders:
          - '*'
          AllowMethods:
          - '*'
          AllowCredentials: false
    Metadata:
      SamResourceId: DevSamRagGenerateImageFunction
  DevSamRagGetChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chats-function
      CodeUri: DevSamRagGetChatsFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: DevSamRagAppTable
      Events:
        GetChats:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /chats
            Method: GET
    Metadata:
      SamResourceId: DevSamRagGetChatsFunction
  DevSamSearchChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-search-chats-function
      CodeUri: DevSamSearchChatsFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: DevSamRagAppTable
      Events:
        GETSearch:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /search
            Method: GET
    Metadata:
      SamResourceId: DevSamSearchChatsFunction
  DevSamRagSseStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-sse-stream-function
      CodeUri: DevSamRagSseStreamFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_AWS_REGION: us-west-2
          DYNAMODB_TABLE_NAME:
            Ref: DevSamRagAppTable
          KNOWLEDGE_BASE_ID: MYT87G8AIP
          S3_BUCKET_NAME:
            Ref: DevSamRagPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
        Cors:
          AllowOrigins:
          - '*'
          AllowHeaders:
          - '*'
          AllowMethods:
          - '*'
          AllowCredentials: false
    Metadata:
      SamResourceId: DevSamRagSseStreamFunction
  DevSamRagGetChatDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chat-detail-function
      CodeUri: DevSamRagGetChatDetailFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: DevSamRagAppTable
      Events:
        GetChatDetail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: GET
        DeleteChatDetail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: DELETE
    Metadata:
      SamResourceId: DevSamRagGetChatDetailFunction
  DevSamRagPromptImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dev-sam-rag-prompt-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
          MaxAge: 3000
  DevSamRagFrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dev-sam-rag-front
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
  DevSamRagFrontOAI:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${AWS::StackName}-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  DevSamRagFrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DevSamRagFrontBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${DevSamRagFrontBucket.Arn}/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${DevSamRagDistribution}
  DevSamRagDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment:
          Fn::Sub: ${AWS::StackName} distribution
        Aliases:
          Fn::If:
          - HasCertificate
          - - Ref: DomainName
          - Ref: AWS::NoValue
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate:
          Fn::If:
          - HasCertificate
          - AcmCertificateArn:
              Ref: CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::GetAtt:
            - DevSamRagFrontBucket
            - RegionalDomainName
          S3OriginConfig: {}
          OriginAccessControlId:
            Ref: DevSamRagFrontOAI
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
        CustomErrorResponses:
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
  DevSamRagAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-sam-rag-app-table
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  DevSamRagAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dev-sam-rag-app-user-pool
      AutoVerifiedAttributes:
      - email
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
  DevSamRagAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dev-sam-rag-app-client
      UserPoolId:
        Ref: DevSamRagAppUserPool
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 14
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days
Outputs:
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: DevSamRagAppUserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitoUserPoolId
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: DevSamRagAppUserPoolClient
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitoUserPoolClientId
  ApiGatewayHttpApiUrl:
    Description: API Gateway HTTP API URL
    Value:
      Fn::Sub: https://${DevSamRagAppHttpApi}.execute-api.${AWS::Region}.amazonaws.com
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiGatewayHttpApiUrl
  RagGenerateImageFunctionUrl:
    Description: RAG Generate Image Function URL
    Value:
      Fn::GetAtt:
      - DevSamRagGenerateImageFunctionUrl
      - FunctionUrl
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RagGenerateImageFunctionUrl
  RagSseStreamFunctionUrl:
    Description: RAG SSE Stream Function URL
    Value:
      Fn::GetAtt:
      - DevSamRagSseStreamFunctionUrl
      - FunctionUrl
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RagSseStreamFunctionUrl
