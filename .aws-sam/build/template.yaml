AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ragchat stack
Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Architectures:
    - x86_64
    Tags:
      Project: ragchat-app
      ManagedBy: sam
      Environment:
        Ref: Environment
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - stg
    - prod
    Description: Environment name (dev/stg/prod)
  DomainName:
    Type: String
    Default: dev.ai.cpinfo.jp
    Description: Domain name for CloudFront distribution
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the domain (must be in us-east-1)
    Default: arn:aws:acm:us-east-1:794038219704:certificate/7d2d02e3-c835-491a-b616-50b55f738943
Conditions:
  HasCertificate:
    Fn::Not:
    - Fn::Equals:
      - Ref: CertificateArn
      - ''
Resources:
  IamStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: IamStack\template.yaml
      Parameters:
        Environment:
          Ref: Environment
        DynamoDBTableArn:
          Fn::GetAtt:
          - RagChatTable
          - Arn
        CognitoUserPoolArn:
          Fn::GetAtt:
          - RagChatUserPool
          - Arn
    Metadata:
      SamResourceId: IamStack
  RagChatHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name:
        Fn::Sub: ${Environment}-ragchat-http-api
      CorsConfiguration:
        AllowOrigins:
        - '*'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
        - DELETE
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${RagChatUserPool}
              audience:
              - Ref: RagChatUserPoolClient
            IdentitySource: $request.header.Authorization
        DefaultAuthorizer: CognitoAuthorizer
  RagChatPromptImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-prompt-images-function
      CodeUri: RagChatPromptImagesFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaPromptImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME:
            Ref: RagChatPromptImagesBucket
      Events:
        PresignedUrl:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /presigned-url
            Method: POST
    Metadata:
      SamResourceId: RagChatPromptImagesFunction
  RagChatS3ImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-s3-images-function
      CodeUri: RagChatS3ImagesFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaS3ImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME:
            Ref: RagChatPromptImagesBucket
      Events:
        GetImage:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /get-image
            Method: POST
    Metadata:
      SamResourceId: RagChatS3ImagesFunction
  RagChatCognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-cognito-post-confirmation-function
      CodeUri: RagChatCognitoPostConfirmationFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaCognitoSESRoleArn
    Metadata:
      SamResourceId: RagChatCognitoPostConfirmationFunction
  RagChatCognitoUserEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-cognito-user-enable-function
      CodeUri: RagChatCognitoUserEnableFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaCognitoSESRoleArn
    Metadata:
      SamResourceId: RagChatCognitoUserEnableFunction
  RagChatGenerateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-generate-image-function
      CodeUri: RagChatGenerateImageFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_GENIMAGE_AWS_REGION: us-east-1
          DYNAMODB_TABLE_NAME:
            Ref: RagChatTable
          S3_BUCKET_NAME:
            Ref: RagChatPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowOrigins:
          - '*'
          AllowHeaders:
          - '*'
          AllowMethods:
          - '*'
          AllowCredentials: false
    Metadata:
      SamResourceId: RagChatGenerateImageFunction
  RagChatGetChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-get-chats-function
      CodeUri: RagChatGetChatsFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: RagChatTable
      Events:
        GetChats:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /chats
            Method: GET
    Metadata:
      SamResourceId: RagChatGetChatsFunction
  RagChatSearchChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-search-chats-function
      CodeUri: RagChatSearchChatsFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: RagChatTable
      Events:
        GETSearch:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /search
            Method: GET
    Metadata:
      SamResourceId: RagChatSearchChatsFunction
  RagChatSseStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-sse-stream-function
      CodeUri: RagChatSseStreamFunction
      Handler: index.handler
      Runtime: nodejs22.x
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_AWS_REGION: us-west-2
          DYNAMODB_TABLE_NAME:
            Ref: RagChatTable
          KB_AWS_REGION: ap-northeast-1
          KNOWLEDGE_BASE_ID: MYT87G8AIP
          S3_BUCKET_NAME:
            Ref: RagChatPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
        Cors:
          AllowOrigins:
          - '*'
          AllowHeaders:
          - '*'
          AllowMethods:
          - '*'
          AllowCredentials: false
    Metadata:
      SamResourceId: RagChatSseStreamFunction
  RagChatGetChatDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${Environment}-ragchat-get-chat-detail-function
      CodeUri: RagChatGetChatDetailFunction
      Handler: app.lambda_handler
      Runtime: python3.13
      Role:
        Fn::GetAtt:
        - IamStack
        - Outputs.RagChatLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME:
            Ref: RagChatTable
      Events:
        GetChatDetail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /chats/{chatId}
            Method: GET
        DeleteChatDetail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: RagChatHttpApi
            Path: /chats/{chatId}
            Method: DELETE
    Metadata:
      SamResourceId: RagChatGetChatDetailFunction
  RagChatPromptImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Environment}-ragchat-prompt-images-${AWS::AccountId}
      Tags:
      - Key: Project
        Value: ragchat-app
      - Key: ManagedBy
        Value: sam
      - Key: Environment
        Value:
          Ref: Environment
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - ETag
          MaxAge: 3000
  RagChatFrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${Environment}-ragchat-frontend-${AWS::AccountId}
      Tags:
      - Key: Project
        Value: ragchat-app
      - Key: ManagedBy
        Value: sam
      - Key: Environment
        Value:
          Ref: Environment
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
  RagChatFrontOAI:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name:
          Fn::Sub: ${Environment}-ragchat-oac
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  RagChatFrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: RagChatFrontBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          Resource:
            Fn::Sub: ${RagChatFrontBucket.Arn}/*
          Condition:
            StringEquals:
              AWS:SourceArn:
                Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${RagChatDistribution}
  RagChatDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment:
          Fn::Sub: ${Environment}-ragchat distribution
        Aliases:
          Fn::If:
          - HasCertificate
          - - Ref: DomainName
          - Ref: AWS::NoValue
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate:
          Fn::If:
          - HasCertificate
          - AcmCertificateArn:
              Ref: CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::GetAtt:
            - RagChatFrontBucket
            - RegionalDomainName
          S3OriginConfig: {}
          OriginAccessControlId:
            Ref: RagChatFrontOAI
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd
        CustomErrorResponses:
        - ErrorCode: 403
          ResponseCode: 200
          ResponsePagePath: /index.html
        - ErrorCode: 404
          ResponseCode: 200
          ResponsePagePath: /index.html
  RagChatTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${Environment}-ragchat-table
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
      - Key: Project
        Value: ragchat-app
      - Key: ManagedBy
        Value: sam
      - Key: Environment
        Value:
          Ref: Environment
  RagChatUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${Environment}-ragchat-user-pool
      UserPoolTags:
        Project: ragchat-app
        ManagedBy: sam
        Environment:
          Ref: Environment
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
      - Name: email
        AttributeDataType: String
        Required: true
  RagChatUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${Environment}-ragchat-client
      UserPoolId:
        Ref: RagChatUserPool
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 14
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days
Outputs:
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: RagChatUserPool
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitoUserPoolId
  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: RagChatUserPoolClient
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CognitoUserPoolClientId
  ApiGatewayHttpApiUrl:
    Description: API Gateway HTTP API URL
    Value:
      Fn::Sub: https://${RagChatHttpApi}.execute-api.${AWS::Region}.amazonaws.com
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiGatewayHttpApiUrl
  RagChatGenerateImageFunctionUrl:
    Description: RAG Generate Image Function URL
    Value:
      Fn::GetAtt:
      - RagChatGenerateImageFunctionUrl
      - FunctionUrl
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RagChatGenerateImageFunctionUrl
  RagChatSseStreamFunctionUrl:
    Description: RAG SSE Stream Function URL
    Value:
      Fn::GetAtt:
      - RagChatSseStreamFunctionUrl
      - FunctionUrl
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RagChatSseStreamFunctionUrl
