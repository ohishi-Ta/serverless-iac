AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: dev-sam stack

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Architectures:
      - x86_64

Resources:

  # IAMロールスタック（ネストスタック）
  IamStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./iam-roles.yaml
      Parameters:
        DynamoDBTableArn: !GetAtt DevSamRagAppTable.Arn
        CognitoUserPoolArn: !GetAtt DevSamRagAppUserPool.Arn

  # API Gateway HTTP API
  DevSamRagAppHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: dev-sam-rag-app-http-api
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - DELETE
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${DevSamRagAppUserPool}
              audience:
                - !Ref DevSamRagAppUserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: CognitoAuthorizer


  # Lambda
  DevSamRagPromptImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-prompt-images-function
      CodeUri: functions/rag-prompt-images/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaPromptImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME: dev-rag-prompt-images
      Events:
        PresignedUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /presigned-url
            Method: POST

  DevSamS3ImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-s3-images-function
      CodeUri: functions/s3-images/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaS3ImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME: dev-rag-prompt-images
      Events:
        GetImage:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /get-image
            Method: POST

  DevSamCognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-post-confirmation-function
      CodeUri: functions/cognito-post-confirmation/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaCognitoSESRoleArn

  DevSamCognitoUserEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-user-enable-function
      CodeUri: functions/cognito-user-enable/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaCognitoSESRoleArn

  DevSamRagGenerateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-generate-image-function
      CodeUri: functions/rag-generate-image/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_AWS_REGION: us-west-2
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
          S3_BUCKET_NAME: dev-rag-prompt-images
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowOrigins:
            - '*'
          AllowHeaders:
            - '*'
          AllowMethods:
            - '*'
          AllowCredentials: false

  DevSamRagGetChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chats-function
      CodeUri: functions/rag-get-chats/
      Handler: app.lambda_handler
      Runtime: python3.13
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GetChats:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats
            Method: GET

  DevSamSearchChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-search-chats-function
      CodeUri: functions/search-chats/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GETSearch:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /search
            Method: GET

  DevSamRagSseStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-sse-stream-function
      CodeUri: functions/rag-sse-stream/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_AWS_REGION: us-west-2
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
          KNOWLEDGE_BASE_ID: MYT87G8AIP
          S3_BUCKET_NAME: dev-rag-prompt-images
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
        Cors:
          AllowOrigins:
            - '*'
          AllowHeaders:
            - '*'
          AllowMethods:
            - '*'
          AllowCredentials: false

  DevSamRagGetChatDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chat-detail-function
      CodeUri: functions/rag-get-chat-detail/
      Handler: app.lambda_handler
      Runtime: python3.13
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GetChatDetail:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: GET

        DeleteChatDetail:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: DELETE

  # DynamoDB
  DevSamRagAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-sam-rag-app-table
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito User Pool
  DevSamRagAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dev-sam-rag-app-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true

  # Cognito User Pool Client
  DevSamRagAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dev-sam-rag-app-client
      UserPoolId: !Ref DevSamRagAppUserPool
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 14
      PreventUserExistenceErrors: ENABLED 
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days