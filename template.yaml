AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: dev-sam stack

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Architectures:
      - x86_64

Parameters:
  DomainName:
    Type: String
    Default: dev.ai.cpinfo.jp
    Description: Domain name for CloudFront distribution
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the domain (must be in us-east-1)
    Default: "arn:aws:acm:us-east-1:794038219704:certificate/7d2d02e3-c835-491a-b616-50b55f738943"

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Resources:

  # IAMロールスタック（ネストスタック）
  IamStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./iam-roles.yaml
      Parameters:
        DynamoDBTableArn: !GetAtt DevSamRagAppTable.Arn
        CognitoUserPoolArn: !GetAtt DevSamRagAppUserPool.Arn

  # API Gateway HTTP API
  DevSamRagAppHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: dev-sam-rag-app-http-api
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - DELETE
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${DevSamRagAppUserPool}
              audience:
                - !Ref DevSamRagAppUserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: CognitoAuthorizer


  # Lambda
  DevSamRagPromptImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-prompt-images-function
      CodeUri: functions/rag-prompt-images/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaPromptImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref DevSamRagPromptImagesBucket
      Events:
        PresignedUrl:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /presigned-url
            Method: POST

  DevSamS3ImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-s3-images-function
      CodeUri: functions/s3-images/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaS3ImagesRoleArn
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref DevSamRagPromptImagesBucket
      Events:
        GetImage:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /get-image
            Method: POST

  DevSamCognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-post-confirmation-function
      CodeUri: functions/cognito-post-confirmation/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaCognitoSESRoleArn

  DevSamCognitoUserEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-cognito-user-enable-function
      CodeUri: functions/cognito-user-enable/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaCognitoSESRoleArn

  DevSamRagGenerateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-generate-image-function
      CodeUri: functions/rag-generate-image/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_GENIMAGE_AWS_REGION: us-east-1
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
          S3_BUCKET_NAME: !Ref DevSamRagPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: BUFFERED
        Cors:
          AllowOrigins:
            - '*'
          AllowHeaders:
            - '*'
          AllowMethods:
            - '*'
          AllowCredentials: false

  DevSamRagGetChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chats-function
      CodeUri: functions/rag-get-chats/
      Handler: app.lambda_handler
      Runtime: python3.13
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GetChats:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats
            Method: GET

  DevSamSearchChatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-search-chats-function
      CodeUri: functions/search-chats/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GETSearch:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /search
            Method: GET

  DevSamRagSseStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-sse-stream-function
      CodeUri: functions/rag-sse-stream/
      Handler: index.handler
      Runtime: nodejs22.x
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGenerateRoleArn
      Environment:
        Variables:
          BEDROCK_AWS_REGION: us-west-2
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
          KNOWLEDGE_BASE_ID: MYT87G8AIP
          S3_BUCKET_NAME: !Ref DevSamRagPromptImagesBucket
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
        Cors:
          AllowOrigins:
            - '*'
          AllowHeaders:
            - '*'
          AllowMethods:
            - '*'
          AllowCredentials: false

  DevSamRagGetChatDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: dev-sam-rag-get-chat-detail-function
      CodeUri: functions/rag-get-chat-detail/
      Handler: app.lambda_handler
      Runtime: python3.13
      Role: !GetAtt IamStack.Outputs.DevSamLambdaGetChatRoleArn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DevSamRagAppTable
      Events:
        GetChatDetail:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: GET

        DeleteChatDetail:
          Type: HttpApi
          Properties:
            ApiId: !Ref DevSamRagAppHttpApi
            Path: /chats/{chatId}
            Method: DELETE
            
  # 画像プロンプト用S3バケット
  DevSamRagPromptImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dev-sam-rag-prompt-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "GET"
              - "PUT"
              - "POST"
              - "DELETE"
              - "HEAD"
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - "ETag"
            MaxAge: 3000


  # フロントエンド用S3バケット
  DevSamRagFrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dev-sam-rag-front
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true

  # CloudFrontディストリビューション用OAC
  DevSamRagFrontOAI:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # S3バケットポリシー（CloudFrontからのアクセスのみ許可）
  DevSamRagFrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DevSamRagFrontBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${DevSamRagFrontBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DevSamRagDistribution}"


  # CloudFrontディストリビューション
  DevSamRagDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${AWS::StackName} distribution"
        Aliases: !If 
          - HasCertificate
          - [!Ref DomainName]
          - !Ref AWS::NoValue
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        PriceClass: PriceClass_All
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt DevSamRagFrontBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref DevSamRagFrontOAI
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd  # Managed-CORS-With-Preflight
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          
  # DynamoDB
  DevSamRagAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev-sam-rag-app-table
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Cognito User Pool
  DevSamRagAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: dev-sam-rag-app-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true

  # Cognito User Pool Client
  DevSamRagAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: dev-sam-rag-app-client
      UserPoolId: !Ref DevSamRagAppUserPool
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 14
      PreventUserExistenceErrors: ENABLED 
      TokenValidityUnits:
        AccessToken: days
        IdToken: days
        RefreshToken: days

Outputs:
  # Cognito関連
  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref DevSamRagAppUserPool
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolId"

  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref DevSamRagAppUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-CognitoUserPoolClientId"

  # API Gateway関連
  ApiGatewayHttpApiUrl:
    Description: API Gateway HTTP API URL
    Value: !Sub "https://${DevSamRagAppHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayHttpApiUrl"

  # Lambda Function URL関連
  RagGenerateImageFunctionUrl:
    Description: RAG Generate Image Function URL
    Value: !GetAtt DevSamRagGenerateImageFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-RagGenerateImageFunctionUrl"

  RagSseStreamFunctionUrl:
    Description: RAG SSE Stream Function URL
    Value: !GetAtt DevSamRagSseStreamFunctionUrl.FunctionUrl
    Export:
      Name: !Sub "${AWS::StackName}-RagSseStreamFunctionUrl"